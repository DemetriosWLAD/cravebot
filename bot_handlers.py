#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤ –¥–ª—è CraveBreaker –±–æ—Ç–∞
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from interventions import InterventionManager
from utils import MessageTemplates
import asyncio
import random

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, database: Database):
        self.db = database
        self.interventions = InterventionManager()
        self.templates = MessageTemplates()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_exists = await self.db.user_exists(user_id)
        
        if not user_exists:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            await self.db.create_user(user_id, username)
            await self.show_onboarding(update, context)
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
    
    async def show_onboarding(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        welcome_text = self.templates.get_welcome_message()
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", callback_data="onboarding_complete")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu_text = self.templates.get_main_menu_text()
        
        keyboard = [
            [InlineKeyboardButton("üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="emergency_help")],
            [InlineKeyboardButton("üî• –ù–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä", callback_data="new_trigger")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üìñ –û CraveBreaker", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(menu_text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(menu_text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback'–æ–≤
        if data == "onboarding_complete":
            await self.show_main_menu(update, context)
            
        elif data == "emergency_help":
            await self.start_emergency_intervention(update, context)
            
        elif data == "new_trigger":
            await self.show_add_trigger(update, context)
            
        elif data == "show_stats":
            await self.show_stats(update, context)
            
        elif data == "about":
            await self.show_about(update, context)
            
        elif data == "back_to_menu":
            await self.show_main_menu(update, context)
            
        elif data.startswith("intervention_"):
            await self.handle_intervention_callback(update, context, data)
            
        elif data.startswith("trigger_"):
            await self.handle_trigger_callback(update, context, data)
            
        elif data.startswith("outcome_"):
            await self.handle_outcome_callback(update, context, data)
    
    async def start_emergency_intervention(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏"""
        user_id = update.effective_user.id
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ –ø–æ–º–æ—â—å—é
        await self.db.log_help_request(user_id)
        
        text = "üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∫–∏:"
        
        keyboard = [
            [InlineKeyboardButton("ü´Å –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", callback_data="intervention_breathing")],
            [InlineKeyboardButton("ü§î –ö–æ—É—á–∏–Ω–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="intervention_coaching")],
            [InlineKeyboardButton("üéÆ –û—Ç–≤–ª–µ–∫–∞—é—â–∞—è –∏–≥—Ä–∞", callback_data="intervention_game")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_intervention_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏"""
        query = update.callback_query
        intervention_type = callback_data.replace("intervention_", "")
        
        if intervention_type == "breathing":
            await self.start_breathing_exercise(update, context)
        elif intervention_type == "coaching":
            await self.show_coaching_question(update, context)
        elif intervention_type == "game":
            await self.start_mini_game(update, context)
    
    async def start_breathing_exercise(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        query = update.callback_query
        
        exercise = self.interventions.get_breathing_exercise()
        
        text = f"ü´Å **–î—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ**\n\n{exercise['instruction']}\n\n_–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –¥—ã—à–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ..._"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data="outcome_success")],
            [InlineKeyboardButton("‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data="outcome_failed")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="emergency_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        await self.run_breathing_timer(update, context, exercise['duration'])
    
    async def run_breathing_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, duration: int):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        phases = ["–í–¥–æ—Ö... üí®", "–ó–∞–¥–µ—Ä–∂–∫–∞... ‚è∏Ô∏è", "–í—ã–¥–æ—Ö... üå¨Ô∏è", "–ü–∞—É–∑–∞... ‚è∏Ô∏è"]
        
        for i in range(duration // 4):  # –ö–∞–∂–¥—ã–π —Ü–∏–∫–ª 16 —Å–µ–∫—É–Ω–¥
            for phase in phases:
                if i == 0:  # –¢–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∑—ã
                    try:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=f"ü´Å {phase}"
                        )
                        await asyncio.sleep(4)
                    except:
                        break
    
    async def show_coaching_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∫–æ—É—á–∏–Ω–≥–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        query = update.callback_query
        
        question = self.interventions.get_coaching_question()
        
        text = f"ü§î **–ö–æ—É—á–∏–Ω–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å**\n\n{question}\n\n_–ü–æ–¥—É–º–∞–π—Ç–µ –Ω–∞–¥ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º 1-2 –º–∏–Ω—É—Ç—ã..._"
        
        keyboard = [
            [InlineKeyboardButton("üí° –≠—Ç–æ –ø–æ–º–æ–≥–ª–æ", callback_data="outcome_success")],
            [InlineKeyboardButton("‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="outcome_failed")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="intervention_coaching")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="emergency_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_mini_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è"""
        query = update.callback_query
        
        game = self.interventions.get_mini_game()
        
        text = f"üéÆ **{game['name']}**\n\n{game['description']}\n\n{game['task']}"
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data="outcome_success")],
            [InlineKeyboardButton("üòî –ù–µ –æ—Ç–≤–ª–µ–∫–ª–æ", callback_data="outcome_failed")],
            [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è –∏–≥—Ä–∞", callback_data="intervention_game")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="emergency_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_outcome_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        outcome = callback_data.replace("outcome_", "")
        success = outcome == "success"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.log_intervention_outcome(user_id, success)
        
        if success:
            text = "üéâ **–û—Ç–ª–∏—á–Ω–æ!**\n\n–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∏–º–ø—É–ª—å—Å–æ–º! –≠—Ç–æ –±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞.\n\nüìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∞–Ω."
        else:
            text = "üòî **–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!**\n\n–ë–æ—Ä—å–±–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é —Å–Ω–æ–≤–∞.\n\nüìä –≠—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ —Ç–æ–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞."
        
        keyboard = [
            [InlineKeyboardButton("üÜò –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="emergency_help")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_add_trigger(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        query = update.callback_query
        
        text = "üî• **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è:"
        
        keyboard = [
            [InlineKeyboardButton("üç≠ –°–ª–∞–¥–∫–æ–µ", callback_data="trigger_sweet")],
            [InlineKeyboardButton("üö¨ –ö—É—Ä–µ–Ω–∏–µ", callback_data="trigger_smoking")],
            [InlineKeyboardButton("üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω", callback_data="trigger_phone")],
            [InlineKeyboardButton("üç∑ –ê–ª–∫–æ–≥–æ–ª—å", callback_data="trigger_alcohol")],
            [InlineKeyboardButton("üò¥ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", callback_data="trigger_procrastination")],
            [InlineKeyboardButton("‚ûï –î—Ä—É–≥–æ–µ", callback_data="trigger_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_trigger_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        trigger_type = callback_data.replace("trigger_", "")
        trigger_names = {
            "sweet": "–°–ª–∞–¥–∫–æ–µ",
            "smoking": "–ö—É—Ä–µ–Ω–∏–µ", 
            "phone": "–°–º–∞—Ä—Ç—Ñ–æ–Ω",
            "alcohol": "–ê–ª–∫–æ–≥–æ–ª—å",
            "procrastination": "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è"
        }
        
        if trigger_type in trigger_names:
            await self.db.add_user_trigger(user_id, trigger_names[trigger_type])
            
            text = f"‚úÖ **–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!**\n\nüî• {trigger_names[trigger_type]}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ."
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="new_trigger")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif trigger_type == "custom":
            text = "‚úçÔ∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä**\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è:"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="new_trigger")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            context.user_data['waiting_for_custom_trigger'] = True
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        stats = await self.db.get_user_stats(user_id)
        
        text = self.templates.get_stats_message(stats)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_about(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        query = update.callback_query
        
        text = self.templates.get_about_message()
        
        keyboard = [
            [InlineKeyboardButton("üîí –ü–æ–¥–ø–∏—Å–∫–∞ (—Å–∫–æ—Ä–æ)", callback_data="subscription")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        if context.user_data.get('waiting_for_custom_trigger'):
            await self.db.add_user_trigger(user_id, message_text)
            context.user_data['waiting_for_custom_trigger'] = False
            
            text = f"‚úÖ **–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!**\n\nüî• {message_text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ."
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="new_trigger")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = self.templates.get_help_message()
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
