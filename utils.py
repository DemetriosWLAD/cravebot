#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Утилиты и шаблоны сообщений для CraveBreaker бота
"""

from datetime import datetime
from typing import Dict, List
import random

class MessageTemplates:
    def __init__(self):
        self.motivational_quotes = self._init_quotes()
    
    def _init_quotes(self) -> List[str]:
        """Мотивационные цитаты"""
        return [
            "💪 Каждое 'нет' импульсу - это 'да' лучшей версии себя!",
            "🌟 Ты сильнее своих привычек!",
            "🚀 Маленькие победы ведут к большим изменениям!",
            "🎯 Сосредоточься на прогрессе, а не на совершенстве!",
            "🔥 Твоя сила воли растет с каждым правильным выбором!",
            "⭐ Ты можешь делать сложные вещи!",
            "🌈 Каждый день - новая возможность стать лучше!",
            "💎 Дисциплина - это любовь к будущему себе!"
        ]
    
    def get_welcome_message(self) -> str:
        """Приветственное сообщение для новых пользователей"""
        return """🎉 **Добро пожаловать в CraveBreaker!**

Я ваш помощник в борьбе с навязчивыми привычками и импульсами.

🎯 **Что я умею:**
• 🆘 Экстренная поддержка при сильном импульсе
• 📊 Отслеживание вашего прогресса  
• 🧘‍♀️ Дыхательные техники и упражнения
• 🤔 Коучинговые вопросы для осознанности
• 🎮 Отвлекающие мини-игры
• 🔥 Управление триггерами и привычками

💡 **Как это работает:**
Когда чувствуете импульс к нежелательному поведению - просто напишите мне или нажмите "🆘 Срочная помощь". Я предложу техники, которые помогут справиться с моментом.

🏆 **Помните:** Каждое обращение ко мне вместо поддавания импульсу - уже победа!

Готовы начать путь к лучшей версии себя?"""

    def get_main_menu_text(self) -> str:
        """Текст главного меню"""
        quote = random.choice(self.motivational_quotes)
        
        return f"""🏠 **Главное меню CraveBreaker**

{quote}

Выберите действие:

🆘 **Срочная помощь** - экстренная поддержка при импульсе
🔥 **Новый триггер** - добавить привычку для отслеживания  
📊 **Моя статистика** - посмотреть прогресс
📖 **О CraveBreaker** - информация о боте

💬 В любой момент напишите любое сообщение, чтобы вернуться в меню."""

    def get_help_message(self) -> str:
        """Сообщение помощи"""
        return """❓ **Справка по CraveBreaker**

🤖 **Основные команды:**
• `/start` - перезапуск бота
• `/menu` - показать главное меню
• `/stats` - показать статистику
• `/help` - эта справка

🆘 **Как получить помощь:**
1. Нажмите "🆘 Срочная помощь" или напишите любое сообщение
2. Выберите тип интервенции: дыхание, вопрос или игра
3. Следуйте инструкциям
4. Отметьте результат для статистики

🔥 **Управление триггерами:**
• Добавляйте привычки, с которыми боретесь
• Отслеживайте прогресс по каждой
• Получайте персонализированные советы

📊 **Статистика:**
• Количество обращений за помощью
• Процент успешных сопротивлений импульсам
• Прогресс за неделю/месяц
• Ваши активные триггеры

💡 **Советы:**
• Обращайтесь за помощью при первых признаках импульса
• Отмечайте честно результаты интервенций
• Добавляйте все проблемные привычки для лучшего трекинга
• Используйте бота регулярно для формирования новой привычки"""

    def get_about_message(self) -> str:
        """Информация о боте"""
        return """📖 **О CraveBreaker**

🎯 **Миссия:**
Помочь людям обрести контроль над своими импульсами и привычками через поддержку в критические моменты.

🧠 **Научная основа:**
Бот использует проверенные методы:
• Техники осознанности (mindfulness)
• Когнитивно-поведенческие интервенции
• Дыхательные практики для снижения стресса
• Отвлечение внимания в критические моменты

📊 **Принцип работы:**
1. **Момент выбора** - вы чувствуете импульс
2. **Пауза** - обращение к боту вместо автоматической реакции
3. **Интервенция** - техника для изменения состояния
4. **Новый выбор** - осознанное решение
5. **Отслеживание** - фиксация результата

🔬 **Почему это работает:**
• Создает паузу между импульсом и действием
• Активирует префронтальную кору (зона самоконтроля)
• Меняет фокус внимания
• Укрепляет нейронные связи самоконтроля

👥 **Кому помогает:**
• Борющимся с перееданием
• Бросающим курить
• Ограничивающим алкоголь
• Контролирующим время в соцсетях
• Преодолевающим прокрастинацию

🚀 **Версия:** MVP 1.0
📅 **Разработано:** 2025

**Помните:** Сила воли - это навык, который можно тренировать! 💪"""

    def get_stats_message(self, stats: Dict) -> str:
        """Форматирование статистики пользователя"""
        registration_date = datetime.fromisoformat(stats['registration_date']).strftime('%d.%m.%Y')
        days_since_registration = (datetime.now() - datetime.fromisoformat(stats['registration_date'])).days
        
        # Определяем мотивационное сообщение на основе статистики
        if stats['success_rate'] >= 80:
            motivation = "🏆 Превосходный самоконтроль! Вы - чемпион!"
        elif stats['success_rate'] >= 60:
            motivation = "💪 Отличный прогресс! Продолжайте в том же духе!"
        elif stats['success_rate'] >= 40:
            motivation = "📈 Хорошая динамика! Каждая попытка делает вас сильнее!"
        elif stats['success_rate'] >= 20:
            motivation = "🌱 Вы на правильном пути! Не сдавайтесь!"
        else:
            motivation = "🚀 Каждое обращение ко мне - уже шаг к победе!"

        triggers_text = ""
        if stats['triggers']:
            triggers_text = "🔥 **Ваши триггеры:**\n" + "\n".join([f"• {trigger}" for trigger in stats['triggers']]) + "\n\n"

        return f"""📊 **Ваша статистика**

{motivation}

📅 **С нами с:** {registration_date} ({days_since_registration} дн.)

🆘 **Всего обращений за помощью:** {stats['total_requests']}
💪 **Интервенций проведено:** {stats['total_interventions']}
✅ **Успешных сопротивлений:** {stats['successful_interventions']}
📈 **Процент успеха:** {stats['success_rate']:.1f}%

📆 **За последнюю неделю:**
• Обращений: {stats['weekly_requests']}
• Успешных: {stats['weekly_successes']}

{triggers_text}🎯 **Совет:** {self._get_advice_based_on_stats(stats)}"""

    def _get_advice_based_on_stats(self, stats: Dict) -> str:
        """Персонализированный совет на основе статистики"""
        if stats['total_requests'] == 0:
            return "Добавьте свои триггеры и не стесняйтесь обращаться за помощью!"
        
        if stats['success_rate'] >= 80:
            return "Ваш самоконтроль впечатляет! Поделитесь опытом с друзьями."
        elif stats['success_rate'] >= 60:
            return "Отличная работа! Попробуйте добавить новые типы интервенций."
        elif stats['success_rate'] >= 40:
            return "Хороший прогресс! Экспериментируйте с разными техниками."
        elif stats['weekly_requests'] > stats['weekly_successes'] * 2:
            return "Попробуйте дыхательные техники - они часто самые эффективные."
        else:
            return "Главное - продолжать попытки. Каждая тренирует вашу силу воли!"

    def get_intervention_success_message(self) -> str:
        """Сообщение при успешной интервенции"""
        messages = [
            "🎉 Поздравляю! Вы победили импульс!",
            "💪 Отличная работа! Ваша сила воли растет!",
            "🌟 Браво! Это настоящая победа!",
            "🏆 Превосходно! Вы контролируете ситуацию!",
            "✨ Великолепно! Каждая такая победа важна!",
            "🚀 Фантастика! Вы становитесь сильнее!",
            "⭐ Молодец! Это требовало настоящего мужества!"
        ]
        return random.choice(messages)

    def get_intervention_failure_message(self) -> str:
        """Сообщение при неуспешной интервенции"""
        messages = [
            "😔 Ничего страшного! Борьба продолжается.",
            "💝 Важно, что вы попытались! Это уже прогресс.",
            "🌱 Каждая попытка делает вас сильнее.",
            "🤗 Не расстраивайтесь. Завтра новый день!",
            "📈 Неудачи - часть пути к успеху.",
            "💪 Главное - не сдаваться!",
            "🎯 Попробуйте другую технику в следующий раз."
        ]
        return random.choice(messages)

class Formatters:
    @staticmethod
    def format_duration(seconds: int) -> str:
        """Форматирование длительности в читаемый вид"""
        if seconds < 60:
            return f"{seconds} сек"
        elif seconds < 3600:
            minutes = seconds // 60
            return f"{minutes} мин"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}ч {minutes}м"
    
    @staticmethod
    def format_percentage(value: float) -> str:
        """Форматирование процентов"""
        return f"{value:.1f}%"
    
    @staticmethod
    def format_date(date_str: str) -> str:
        """Форматирование даты в читаемый вид"""
        try:
            date = datetime.fromisoformat(date_str)
            return date.strftime('%d.%m.%Y %H:%M')
        except:
            return date_str

class ValidationUtils:
    @staticmethod
    def is_valid_trigger_name(name: str) -> bool:
        """Проверка валидности имени триггера"""
        if not name or len(name.strip()) < 2:
            return False
        if len(name.strip()) > 50:
            return False
        # Проверяем на недопустимые символы
        forbidden_chars = ['<', '>', '&', '"', "'"]
        return not any(char in name for char in forbidden_chars)
    
    @staticmethod
    def sanitize_user_input(text: str) -> str:
        """Очистка пользовательского ввода"""
        if not text:
            return ""
        # Удаляем потенциально опасные символы
        forbidden_chars = ['<', '>', '&', '"', "'"]
        for char in forbidden_chars:
            text = text.replace(char, '')
        return text.strip()[:100]  # Ограничиваем длину
